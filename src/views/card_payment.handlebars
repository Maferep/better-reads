<div id="payment-content">
    <div id="purchase-resume">
        {{!-- Show the total --}}
        <h2 id="total-price">Total: ${{total_price}}</h2>
    </div>


    <div class="payment-title">
        <h1>Payment Information</h1>
    </div>
    <div class="container preload">
        <div class="creditcard">
            <div class="front">
                <div id="ccsingle"></div>
                <svg version="1.1" id="cardfront" xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 750 471"
                    style="enable-background:new 0 0 750 471;" xml:space="preserve">
                    <g id="Front">
                        <g id="CardBackground">
                            <g id="Page-1_1_">
                                <g id="amex_1_">
                                    <path id="Rectangle-1_1_" class="lightcolor grey" d="M40,0h670c22.1,0,40,17.9,40,40v391c0,22.1-17.9,40-40,40H40c-22.1,0-40-17.9-40-40V40
                            C0,17.9,17.9,0,40,0z" />
                                </g>
                            </g>
                            <path class="darkcolor greydark"
                                d="M750,431V193.2c-217.6-57.5-556.4-13.5-750,24.9V431c0,22.1,17.9,40,40,40h670C732.1,471,750,453.1,750,431z" />
                        </g>
                        <text transform="matrix(1 0 0 1 60.106 295.0121)" id="svgnumber" class="st2 st3 st4">0123 4567
                            8910 1112</text>
                        <text transform="matrix(1 0 0 1 54.1064 428.1723)" id="svgname" class="st2 st5 st6"></text>
                        <text transform="matrix(1 0 0 1 54.1074 389.8793)" class="st7 st5 st8">cardholder name</text>
                        <text transform="matrix(1 0 0 1 479.7754 388.8793)" class="st7 st5 st8">expiration</text>
                        <text transform="matrix(1 0 0 1 65.1054 241.5)" class="st7 st5 st8">card number</text>
                        <g>
                            <text transform="matrix(1 0 0 1 574.4219 433.8095)" id="svgexpire"
                                class="st2 st5 st9">01/23</text>
                            <text transform="matrix(1 0 0 1 479.3848 417.0097)" class="st2 st10 st11">VALID</text>
                            <text transform="matrix(1 0 0 1 479.3848 435.6762)" class="st2 st10 st11">THRU</text>
                            <polygon class="st2" points="554.5,421 540.4,414.2 540.4,427.9 		" />
                        </g>
                        <g id="cchip">
                            <g>
                                <path class="st2" d="M168.1,143.6H82.9c-10.2,0-18.5-8.3-18.5-18.5V74.9c0-10.2,8.3-18.5,18.5-18.5h85.3
                        c10.2,0,18.5,8.3,18.5,18.5v50.2C186.6,135.3,178.3,143.6,168.1,143.6z" />
                            </g>
                            <g>
                                <g>
                                    <rect x="82" y="70" class="st12" width="1.5" height="60" />
                                </g>
                                <g>
                                    <rect x="167.4" y="70" class="st12" width="1.5" height="60" />
                                </g>
                                <g>
                                    <path class="st12" d="M125.5,130.8c-10.2,0-18.5-8.3-18.5-18.5c0-4.6,1.7-8.9,4.7-12.3c-3-3.4-4.7-7.7-4.7-12.3
                            c0-10.2,8.3-18.5,18.5-18.5s18.5,8.3,18.5,18.5c0,4.6-1.7,8.9-4.7,12.3c3,3.4,4.7,7.7,4.7,12.3
                            C143.9,122.5,135.7,130.8,125.5,130.8z M125.5,70.8c-9.3,0-16.9,7.6-16.9,16.9c0,4.4,1.7,8.6,4.8,11.8l0.5,0.5l-0.5,0.5
                            c-3.1,3.2-4.8,7.4-4.8,11.8c0,9.3,7.6,16.9,16.9,16.9s16.9-7.6,16.9-16.9c0-4.4-1.7-8.6-4.8-11.8l-0.5-0.5l0.5-0.5
                            c3.1-3.2,4.8-7.4,4.8-11.8C142.4,78.4,134.8,70.8,125.5,70.8z" />
                                </g>
                                <g>
                                    <rect x="82.8" y="82.1" class="st12" width="25.8" height="1.5" />
                                </g>
                                <g>
                                    <rect x="82.8" y="117.9" class="st12" width="26.1" height="1.5" />
                                </g>
                                <g>
                                    <rect x="142.4" y="82.1" class="st12" width="25.8" height="1.5" />
                                </g>
                                <g>
                                    <rect x="142" y="117.9" class="st12" width="26.2" height="1.5" />
                                </g>
                            </g>
                        </g>
                    </g>
                    <g id="Back">
                    </g>
                </svg>
            </div>
            <div class="back">
                <svg version="1.1" id="cardback" xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 750 471"
                    style="enable-background:new 0 0 750 471;" xml:space="preserve">
                    <g id="Front">
                        <line class="st0" x1="35.3" y1="10.4" x2="36.7" y2="11" />
                    </g>
                    <g id="Back">
                        <g id="Page-1_2_">
                            <g id="amex_2_">
                                <path id="Rectangle-1_2_" class="darkcolor greydark" d="M40,0h670c22.1,0,40,17.9,40,40v391c0,22.1-17.9,40-40,40H40c-22.1,0-40-17.9-40-40V40
                        C0,17.9,17.9,0,40,0z" />
                            </g>
                        </g>
                        <rect y="61.6" class="st2" width="750" height="78" />
                        <g>
                            <path class="st3" d="M701.1,249.1H48.9c-3.3,0-6-2.7-6-6v-52.5c0-3.3,2.7-6,6-6h652.1c3.3,0,6,2.7,6,6v52.5
                    C707.1,246.4,704.4,249.1,701.1,249.1z" />
                            <rect x="42.9" y="198.6" class="st4" width="664.1" height="10.5" />
                            <rect x="42.9" y="224.5" class="st4" width="664.1" height="10.5" />
                            <path class="st5"
                                d="M701.1,184.6H618h-8h-10v64.5h10h8h83.1c3.3,0,6-2.7,6-6v-52.5C707.1,187.3,704.4,184.6,701.1,184.6z" />
                        </g>
                        <text transform="matrix(1 0 0 1 621.999 227.2734)" id="svgsecurity" class="st6 st7">985</text>
                        <g class="st8">
                            <text transform="matrix(1 0 0 1 518.083 280.0879)" class="st9 st6 st10">security code</text>
                        </g>
                        <rect x="58.1" y="378.6" class="st11" width="375.5" height="13.5" />
                        <rect x="58.1" y="405.6" class="st11" width="421.7" height="13.5" />
                        <text transform="matrix(1 0 0 1 59.5073 228.6099)" id="svgnameback" class="st12 st13"></text>
                    </g>
                </svg>
            </div>
        </div>
    </div>
    <form id="card-info-form" action="#">
        <div class="form-container">
            {{! <form id="card-info-form"> }}
                <div class="field-container">
                    <label for="name">Name</label>
                    <input id="name" name="card-owner" type="text" pattern="[A-z .]*" required />
                </div>
                <div class="field-container">
                    <label for="cardnumber">Card Number</label><span id="generatecard">generate random</span>
                    <input id="cardnumber" name="card-number" type="text" pattern="[0-9 ]*" inputmode="numeric"
                        required />
                    <svg id="ccicon" class="ccicon" width="750" height="471" viewBox="0 0 750 471" version="1.1"
                        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

                    </svg>
                </div>
                <div class="field-container">
                    <label for="expirationdate">Expiration (mm/yy)</label>
                    <input id="expirationdate" type="text" name="expiration-date" pattern="[0-9]{2}\/[0-9]{2}"
                        inputmode="numeric" required />
                </div>
                <div class="field-container">
                    <label for="securitycode">Security Code</label>
                    <input id="securitycode" type="text" name="security-code" pattern="[0-9]{2,4}" inputmode="numeric"
                        required />
                </div>
        </div>
        <input type="submit" value="Pay" />
    </form>
</div>


<script>

    document.getElementById('cardnumber').addEventListener('input', function (event) {
        const cardNumber = Number(event.target.value.replaceAll(" ", ""));
        const esNumeroTarjetaValido = validateCardNumber(cardNumber);

        if (!esNumeroTarjetaValido) {
            //Custom validity diciendo que la tarjeta no es valida
            event.target.setCustomValidity("The card number is not valid");
            console.log("Checksum de tarjeta no valido");
        } else {
            event.target.setCustomValidity("");
            console.log("Checksum de tarjeta valido");
        }
        
    });

    document.getElementById('card-info-form').addEventListener('submit',
        function (event) {
            event.preventDefault(); 

            const form = event.target;

            const cardOwner = form['card-owner'].value;
            const cardNumber = Number(form['card-number'].value.replaceAll(" ", ""));
            const expirationDate = form['expiration-date'].value;
            const securityCode = Number(form['security-code'].value);           


            const cardInfo = {
                cardOwner,
                cardNumber,
                expirationDate,
                securityCode
            };



            console.log(cardInfo);
            console.log("Acá se enviaria la info al server/api de pago")

            fetch('/cart/card_payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(cardInfo)
            }).then(response => {
                if (response.ok) {
                    //Pago correcto, avisar a usuario y redireccionar a pagina principal
                    Swal.fire({
                        icon: 'success',
                        title: 'Payment successful',
                        text: 'Your payment was successful, you will be redirected to the main page',
                    }).then(() => window.location.href = '/');
                } else {
                    if (status >= 500) {
                        //Error del servidor, avisar a usuario y redireccionar a carrito
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'There was an error with the payment, please try again later',
                        }).then(() => window.location.href = '/cart');
                    }
                    //Si el error es de tipo 400-499
                    response.text().then(text => Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text,
                    }));
                }
            })
            //Error de conexion, avisar a usuario y redireccionar a carrito
            .catch(error => Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'There was an error with the payment, please try again later',
            }).then(() => window.location.href = '/cart'));
        }
    );



// source: https://learnersbucket.com/examples/javascript/credit-card-validation-in-javascript/
    function validateCardNumber(number) {
        //Check if the number contains only numeric value  
        //and is of between 13 to 19 digits
        const regex = new RegExp("^[0-9]{13,19}$");
        if (!regex.test(number)){
            return false;
        }
    
        return luhnCheck(number);
    }

    function luhnCheck(val) {
        let checksum = 0; // running checksum total
        let j = 1; // takes value of 1 or 2

        // Process each digit one by one starting from the last
        for (let i = val.length - 1; i >= 0; i--) {
        let calc = 0;
        // Extract the next digit and multiply by 1 or 2 on alternative digits.
        calc = Number(val.charAt(i)) * j;

        // If the result is in two digits add 1 to the checksum total
        if (calc > 9) {
            checksum = checksum + 1;
            calc = calc - 10;
        }

        // Add the units element to the checksum total
        checksum = checksum + calc;

        // Switch the value of j
        if (j == 1) {
            j = 2;
        } else {
            j = 1;
        }
        }
    
        //Check if it is divisible by 10 or not.
        return (checksum % 10) == 0;
    }
</script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<link rel="stylesheet" href="/static/css/card_payment_widget.css" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/imask/3.4.0/imask.min.js"></script>
<script src="/static/js/card_payment_widget.js"></script>